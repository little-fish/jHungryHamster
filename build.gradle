import java.text.SimpleDateFormat

group 'cz.babi'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

ext {
	mainClass = 'cz.babi.java.jhungryhamster.Main'
	
	// Keystore file.
	keystoreFile = 'keystore.properties'

	maintainer = 'Martin Misiarz'
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile(
        'ch.qos.logback:logback-classic:1.1.3',
        'org.slf4j:slf4j-api:1.7.13',
        'org.apache.commons:commons-lang3:3.4',
        'org.tmatesoft.sqljet:sqljet:1.1.10',
        'com.github.insubstantial:substance:7.3',
        'com.github.insubstantial:substance-flamingo:7.3',
        'com.github.insubstantial:substance-swingx:7.3',
        'com.github.insubstantial:trident:7.3',
        'net.java.dev.appframework:appframework:1.03'
    )
}

jar {
    manifest {
        attributes(
				"Created-By": project.maintainer,
				"Created-On": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()),
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Class-Path': configurations.runtime.collect { 'lib/' + it.getName() }.join(' '),
                'Main-Class': project.mainClass,
                'SplashScreen-Image': 'res/img/splashscreen/jhungryhamster.png',
				"Build-JDK": System.getProperty('java.version'),
				"Source-Compatibility": project.sourceCompatibility,
				"Target-Compatibility": project.targetCompatibility,
				"License": "Apache-2.0"
        )
    }
}

/**
 * Copies all necessary dependencies into output/libs folder.
 */
task copyLibraries(type: Copy, description: 'Copies all necessary dependencies into output/libs folder.') {
	into "$buildDir/libs/lib"
	from configurations.runtime
}

/**
 * Copies all necessary resources into output/libs folder.
 */
task copyResources(type: Copy, description: 'Copies all necessary resources into output/libs folder.') {
	into "$buildDir/libs"
	from 'src/production/resources'
}

build.dependsOn(['copyLibraries', 'copyResources'])

/**
 * Runs the application.
 */
task run(type: JavaExec, description: 'Runs the application.', group: 'run') {
	classpath = files("${buildDir}/libs/${jar.archiveName}")
	main = project.mainClass
	workingDir = "$buildDir/libs"
	systemProperty 'logback.configurationFile', 'logback.xml'
}

run.dependsOn(['copyLibraries', 'copyResources', 'jar'])

/**
 * Debugs the application.
 */
task debug(type: JavaExec, description: 'Debugs the application. The process will be suspended until you connect to port 5005.', group: 'run') {
	classpath = files("${buildDir}/libs/${jar.archiveName}")
	main = project.mainClass
	workingDir = "$buildDir/libs"
	systemProperty 'logback.configurationFile', 'logback.xml'
	debug true
}

debug.dependsOn(['copyLibraries', 'copyResources', 'jar'])

/**
 * Creates package for production.
 */
task createPackage(type: Copy, description: 'Creates package for production.', group: 'build') {
	into "$buildDir/production"
	from 'resources/production'
	from "$buildDir/libs"

	rename {
		String fileName -> fileName.replace(jar.archiveName, 'jHungryHamster.jar')
	}
}

createPackage.dependsOn(build)

def keystorePropertiesFile = project.file(keystoreFile)
if (keystorePropertiesFile.exists()) {
	// Load keystore properties.
	def keystoreProperties = new Properties()
	keystoreProperties.load(keystorePropertiesFile.newDataInputStream())

	// Default Gradle signing.
	if (keystoreProperties['signing.keyId'] && keystoreProperties['signing.password'] && keystoreProperties['signing.secretKeyRingFile']) {
		project.ext['signing.keyId'] = keystoreProperties['signing.keyId']
		project.ext['signing.password'] = keystoreProperties['signing.password']
		project.ext['signing.secretKeyRingFile'] = keystoreProperties['signing.secretKeyRingFile']

		project.plugins.apply('signing')

		signing {
			sign configurations.archives
		}
	}

	// Custom JAR signing.
	if (keystoreProperties['jarsigning.keystore'] && keystoreProperties['jarsigning.keystoreType'] && keystoreProperties['jarsigning.keystorePassword'] && keystoreProperties['jarsigning.alias'] && keystoreProperties['jarsigning.keyPassword']) {
		project.tasks.create('signedJar') {
			group = 'build'
			dependsOn = ['jar']

			doLast {
				String libsDir = file("$buildDir").absolutePath+File.separator+'libs'+File.separator
				ant.signjar(
						jar: libsDir+project.tasks.jar.archiveName,
						signedjar: libsDir+generateSignedArtifactName(project.tasks.jar.archiveName),
						alias: keystoreProperties['jarsigning.alias'],
						storetype: keystoreProperties['jarsigning.keystoreType'],
						keystore: file(keystoreProperties['jarsigning.keystore']).absolutePath,
						storepass: keystoreProperties['jarsigning.keystorePassword'],
						keypass: keystoreProperties['jarsigning.keyPassword']
				)
			}
		}

		project.tasks.getByName('build').dependsOn += ['signedJar']
	}
}
/**
 * Generates name with '-signed' suffix added to given artifact's name.
 * @param artifactName Original artifact's name.
 * @return Artifact's name with '-signed' suffix.
 */
private static def generateSignedArtifactName(String artifactName) {
	def lastDot = artifactName.lastIndexOf('.')
	return artifactName.substring(0, lastDot) + '-signed' + artifactName.substring(lastDot)
}
