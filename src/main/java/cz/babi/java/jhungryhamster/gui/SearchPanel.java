
/*
 * Copyright 2017 Martin Misiarz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cz.babi.java.jhungryhamster.gui;

import cz.babi.java.jhungryhamster.data.Icons;
import cz.babi.java.jhungryhamster.entity.CookBook.Recipe;
import cz.babi.java.jhungryhamster.entity.MyTree;
import cz.babi.java.jhungryhamster.entity.Rating;
import cz.babi.java.jhungryhamster.entity.Settings;
import cz.babi.java.jhungryhamster.event.AbstractDocumentListener;
import cz.babi.java.jhungryhamster.utils.Common;

import javax.swing.event.DocumentEvent;
import javax.swing.tree.TreeSelectionModel;
import java.util.ResourceBundle;

/**
 * Třída definující vzhled a funkčnost panelu pro vyhledávání, včetně stromu
 * s recepty.
 *
 * @author babi
 */
public class SearchPanel extends javax.swing.JPanel {
    
    private static Settings settings = Settings.getInstance();
    private static SearchPanel instance = new SearchPanel();
    private static String filter = "";

    private boolean controlStateOn = settings.isHideSearchDetails();

    /** Creates new form SearchPanel */
    public SearchPanel() {
        
        initComponents();
        
        tree.setRootVisible(settings.isShowRootElement());
        lblControlMouseReleased(null);
        
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
    }
    
    public static SearchPanel getInstatnce() {
        return instance;
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfldKeyWords = new javax.swing.JTextField();
        lblControl = new javax.swing.JLabel();
        pnlDetails = new javax.swing.JPanel();
        pnlSearchOptions = new javax.swing.JPanel();
        pnlSearchInOne = new javax.swing.JPanel();
        chbMethod = new javax.swing.JCheckBox();
        chbAuthor = new javax.swing.JCheckBox();
        pnlSearchInTwo = new javax.swing.JPanel();
        chbIngredients = new javax.swing.JCheckBox();
        chbTitle = new javax.swing.JCheckBox();
        chbNote = new javax.swing.JCheckBox();
        scrollPaneTree = new javax.swing.JScrollPane();
        tree = MyTree.getInstance();

        ResourceBundle bundle = Common.RESOURCE_BUNDLE;
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, bundle.getString("SearchPanel.Form.border.title"),
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new java.awt.Font("DejaVu Sans", 0, 13)));
        setMinimumSize(new java.awt.Dimension(303, 300));
        setName("Form");

        tfldKeyWords.setToolTipText(bundle.getString("SearchPanel.tfldKeyWords.tooltip"));
        tfldKeyWords.setName("tfldKeyWords");

        lblControl.setIcon(Icons.ARROW_DOWN);
        lblControl.setToolTipText(bundle.getString("SearchPanel.lblControl.tooltip"));
        lblControl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblControl.setName("lblControl");
        lblControl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblControlMouseReleased(evt);
            }
        });

        pnlDetails.setName("pnlDetails");

        pnlSearchOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SearchPanel.pnlSearchOptions.border.title")));
        pnlSearchOptions.setMinimumSize(new java.awt.Dimension(267, 85));
        pnlSearchOptions.setName("pnlSearchOptions");
        pnlSearchOptions.setPreferredSize(new java.awt.Dimension(347, 100));

        pnlSearchInOne.setName("pnlSearchInOne");
        pnlSearchInOne.setPreferredSize(new java.awt.Dimension(125, 98));

        chbMethod.setSelected(settings.isSearchInMethod());
        chbMethod.setText(bundle.getString("SearchPanel.chbMethod.text"));
        chbMethod.setName("chbMethod");
        chbMethod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbMethodItemStateChanged(evt);
            }
        });

        chbAuthor.setSelected(settings.isSearchInAuthor());
        chbAuthor.setText(bundle.getString("SearchPanel.chbAuthor.text"));
        chbAuthor.setName("chbAuthor");
        chbAuthor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbAuthorItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchInOneLayout = new javax.swing.GroupLayout(pnlSearchInOne);
        pnlSearchInOne.setLayout(pnlSearchInOneLayout);
        pnlSearchInOneLayout.setHorizontalGroup(
            pnlSearchInOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchInOneLayout.createSequentialGroup()
                .addGroup(pnlSearchInOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbAuthor)
                    .addComponent(chbMethod))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        pnlSearchInOneLayout.setVerticalGroup(
            pnlSearchInOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchInOneLayout.createSequentialGroup()
                .addComponent(chbAuthor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbMethod)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pnlSearchInTwo.setName("pnlSearchInTwo");
        pnlSearchInTwo.setPreferredSize(new java.awt.Dimension(125, 100));

        chbIngredients.setSelected(settings.isSearchInIngredients());
        chbIngredients.setText(bundle.getString("SearchPanel.chbIngredients.text"));
        chbIngredients.setName("chbIngredients");
        chbIngredients.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbIngredientsItemStateChanged(evt);
            }
        });

        chbTitle.setSelected(settings.isSearchInTitle());
        chbTitle.setText(bundle.getString("SearchPanel.chbTitle.text"));
        chbTitle.setName("chbTitle");
        chbTitle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbTitleItemStateChanged(evt);
            }
        });

        chbNote.setSelected(settings.isSearchInNote());
        chbNote.setText(bundle.getString("SearchPanel.chbNote.text"));
        chbNote.setName("chbNote");
        chbNote.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chbNoteItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlSearchInTwoLayout = new javax.swing.GroupLayout(pnlSearchInTwo);
        pnlSearchInTwo.setLayout(pnlSearchInTwoLayout);
        pnlSearchInTwoLayout.setHorizontalGroup(
            pnlSearchInTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchInTwoLayout.createSequentialGroup()
                .addGroup(pnlSearchInTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbTitle)
                    .addComponent(chbIngredients)
                    .addComponent(chbNote))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pnlSearchInTwoLayout.setVerticalGroup(
            pnlSearchInTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchInTwoLayout.createSequentialGroup()
                .addComponent(chbTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbIngredients)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbNote)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlSearchOptionsLayout = new javax.swing.GroupLayout(pnlSearchOptions);
        pnlSearchOptions.setLayout(pnlSearchOptionsLayout);
        pnlSearchOptionsLayout.setHorizontalGroup(
            pnlSearchOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchOptionsLayout.createSequentialGroup()
                .addComponent(pnlSearchInTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlSearchInOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlSearchOptionsLayout.setVerticalGroup(
            pnlSearchOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchOptionsLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(pnlSearchInTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(pnlSearchInOne, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
        );

        scrollPaneTree.setMinimumSize(new java.awt.Dimension(267, 267));
        scrollPaneTree.setName("scrollPaneTree");

        tree.setToolTipText(bundle.getString("SearchPanel.tree.tooltip"));
        tree.setAutoscrolls(true);
        tree.setDragEnabled(true);
        tree.setName("tree");
        tree.setScrollsOnExpand(true);
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        scrollPaneTree.setViewportView(tree);

        javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
        pnlDetails.setLayout(pnlDetailsLayout);
        pnlDetailsLayout.setHorizontalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSearchOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
            .addComponent(scrollPaneTree, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        );
        pnlDetailsLayout.setVerticalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailsLayout.createSequentialGroup()
                .addComponent(pnlSearchOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneTree, javax.swing.GroupLayout.PREFERRED_SIZE, 152, Short.MAX_VALUE))
        );

        pnlSearchOptions.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlDetails, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tfldKeyWords, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblControl)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblControl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfldKeyWords, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tfldKeyWords.getDocument().addDocumentListener(new AbstractDocumentListener() {
            @Override
            public void onUpdate(DocumentEvent e) {
                filter = tfldKeyWords.getText();
                tree.setFilterToModel(filter, true);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metoda zachytává událost kdy uživatel klikne na šipku pro rozbalení/skrytí
     * možností vyhledávání.
     * 
     * @param evt 
     */
    private void lblControlMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblControlMouseReleased
        if(isControlStateOn()) {
            lblControl.setIcon(Icons.ARROW_DOWN);
            pnlSearchOptions.setVisible(false);
            setControlStateOn(false);
            settings.setHideSearchDetails(true);
        } else {
            lblControl.setIcon(Icons.ARROW_UP);
            pnlSearchOptions.setVisible(true);
            setControlStateOn(true);
            settings.setHideSearchDetails(false);
        }
    }//GEN-LAST:event_lblControlMouseReleased

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        tree.reloadVariable();
        reloadRecipePanel();
    }//GEN-LAST:event_treeValueChanged

    private void chbTitleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbTitleItemStateChanged
        settings.setSearchInTitle(chbTitle.isSelected());
        if(!filter.trim().isEmpty()) tree.setFilterToModel(filter, true);
    }//GEN-LAST:event_chbTitleItemStateChanged

    private void chbIngredientsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbIngredientsItemStateChanged
        settings.setSearchInIngredients(chbIngredients.isSelected());
        if(!filter.trim().isEmpty()) tree.setFilterToModel(filter, true);
    }//GEN-LAST:event_chbIngredientsItemStateChanged

    private void chbAuthorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbAuthorItemStateChanged
        settings.setSearchInAuthor(chbAuthor.isSelected());
        if(!filter.trim().isEmpty()) tree.setFilterToModel(filter, true);
    }//GEN-LAST:event_chbAuthorItemStateChanged

    private void chbMethodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbMethodItemStateChanged
        settings.setSearchInMethod(chbMethod.isSelected());
        if(!filter.trim().isEmpty()) tree.setFilterToModel(filter, true);
    }//GEN-LAST:event_chbMethodItemStateChanged

    private void chbNoteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chbNoteItemStateChanged
        settings.setSearchInNote(chbNote.isSelected());
        if(!filter.trim().isEmpty()) tree.setFilterToModel(filter, true);
    }//GEN-LAST:event_chbNoteItemStateChanged

    /**
     * Metoda zachytává změnu kdy uživatel vybere jiný uzel ze stromu receptů.
     * 
     * @param evt 
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chbAuthor;
    private javax.swing.JCheckBox chbIngredients;
    private javax.swing.JCheckBox chbMethod;
    private javax.swing.JCheckBox chbNote;
    private javax.swing.JCheckBox chbTitle;
    private javax.swing.JLabel lblControl;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlSearchInOne;
    private javax.swing.JPanel pnlSearchInTwo;
    private javax.swing.JPanel pnlSearchOptions;
    private javax.swing.JScrollPane scrollPaneTree;
    private static javax.swing.JTextField tfldKeyWords;
    private static MyTree tree;
    // End of variables declaration//GEN-END:variables

    public static void reloadRecipePanel() {
        if(MyTree.getClickedTreeNode()==null) {
            RecipeTitlePanel.setTitleText("");
            RecipeDetailsPanel.setAuthor("");
            RecipeDetailsPanel.setCatebory("");
            RecipeDetailsPanel.setAdded(null);
            RecipeDetailsPanel.setModified(null);
            RecipeDetailsPanel.setNote("");
            RecipeDetailsPanel.setRating(Rating.ZERO);
            RecipeDetailsPanel.setImage(null);
            RecipeBodyPanel.setTpIngredients("");
            RecipeBodyPanel.setTpMethod("");
        } else if(MyTree.getClickedTreeNode().getUserObject() instanceof Recipe) {
            Recipe recipe = MyTree.getCurrentRecipe();
           
            RecipeTitlePanel.setTitleText(recipe.getTitle());
            RecipeDetailsPanel.setAuthor(recipe.getAuthor());
            if(MyTree.getCurrentCategory()!=null) RecipeDetailsPanel.setCatebory(MyTree.getCurrentCategory().getTitle());
            else RecipeDetailsPanel.setCatebory(tree.getModel().getRoot().toString());
            RecipeDetailsPanel.setAdded(recipe.getAdded());
            RecipeDetailsPanel.setModified(recipe.getModified());
            RecipeDetailsPanel.setNote(recipe.getNote());
            RecipeDetailsPanel.setRating(recipe.getRating());
            RecipeDetailsPanel.setImage(recipe.getRecipeImage());
            RecipeBodyPanel.setTpIngredients(recipe.getIngredients());
            RecipeBodyPanel.setTpMethod(recipe.getMethods());
        }
    }
    /**
     * @return the controlStateOn
     */
    private boolean isControlStateOn() {
        return controlStateOn;
    }

    /**
     * @param controlStateOn the controlStateOn to set
     */
    private void setControlStateOn(boolean controlStateOn) {
        this.controlStateOn = controlStateOn;
    }

    /**
     * @return the filter
     */
    public static String getFilter() {
        return filter;
    }
    
    public static void setFilter(String filter) {
        tfldKeyWords.setText(filter);
    }
}
