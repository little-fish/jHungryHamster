
/*
 * Copyright 2017 Martin Misiarz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cz.babi.java.jhungryhamster.gui;

import static cz.babi.java.jhungryhamster.utils.Common.RESOURCE_BUNDLE;

import cz.babi.java.jhungryhamster.Main;
import cz.babi.java.jhungryhamster.data.DatabaseOperations;
import cz.babi.java.jhungryhamster.data.FileOperations;
import cz.babi.java.jhungryhamster.data.Icons;
import cz.babi.java.jhungryhamster.entity.CookBook;
import cz.babi.java.jhungryhamster.entity.MyTree;
import cz.babi.java.jhungryhamster.entity.Settings;
import cz.babi.java.jhungryhamster.entity.TreeNodes;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.SingleFrameApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

/**
 * The application's main frame.
 */
public class MainFrame extends FrameView {

    private static final Logger LOGGER = LoggerFactory.getLogger(MainFrame.class);
    private static Settings settings = Settings.getInstance();
    
    private RecipeDialog recipeDialog;
    private CategoryDialog categoryDialog;
    private SettingsDialog settingsDialog;
    private static StatusPanel statusPanel;
    
    private static FileOperations fileOperations = FileOperations.getInstance();
    private static DatabaseOperations databaseOperations = DatabaseOperations.getInstance();

    public MainFrame(SingleFrameApplication app) {
        super(app);

        getFrame().setTitle(RESOURCE_BUNDLE.getString("Application.title"));

        statusPanel = new StatusPanel();
        
        initComponents();
        this.getFrame().setMinimumSize(new Dimension(855, 510));
        this.getFrame().setIconImage(Icons.HAMSTER_LOGO.getImage());
        
        fillTree();
        
        statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.appStarted.text"),
                new Date(), Icons.STATUS_BULB);
        
        initFirstDatabaseQuerry();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jSeparator = new javax.swing.JSeparator();
        jToolBar = MyToolbar.getInstance();
        jSplitPane = new javax.swing.JSplitPane();
        recipePanel = new RecipePanel();
        searchPanel1 = new SearchPanel();
        statusPanel1 = new StatusPanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu mApp = new javax.swing.JMenu();
        miNewRecipe = new javax.swing.JMenuItem();
        miNewCategory = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miSettings = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem miExit = new javax.swing.JMenuItem();
        mDatabase = new javax.swing.JMenu();
        miOpenDatabase = new javax.swing.JMenuItem();
        miCreateDatabase = new javax.swing.JMenuItem();
        miDeleteDatabase = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miRenameDatabase = new javax.swing.JMenuItem();
        miDatabaseInfo = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        miSupport = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        miAbout = new javax.swing.JMenuItem();

        mainPanel.setMinimumSize(new java.awt.Dimension(912, 533));
        mainPanel.setName("mainPanel");

        jSeparator.setName("jSeparator");

        jSplitPane.setBorder(null);
        jSplitPane.setContinuousLayout(true);
        jSplitPane.setName("jSplitPane");
        jSplitPane.setOneTouchExpandable(true);

        recipePanel.setName("recipePanel");
        jSplitPane.setRightComponent(recipePanel);

        searchPanel1.setName("searchPanel1");
        jSplitPane.setLeftComponent(searchPanel1);

        statusPanel1.setName("statusPanel1");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
            .addComponent(statusPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(jToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(statusPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        menuBar.setName("menuBar");

        mApp.setText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.text"));
        mApp.setMargin(new java.awt.Insets(0, 4, 0, 4));
        mApp.setName("mApp");

        miNewRecipe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        miNewRecipe.setText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.newRecipe.text"));
        miNewRecipe.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.newRecipe.tooltip"));
        miNewRecipe.setName("miNewRecipe");
        miNewRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewRecipeActionPerformed(evt);
            }
        });
        mApp.add(miNewRecipe);

        miNewCategory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        miNewCategory.setText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.newCategory.text"));
        miNewCategory.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.newCategory.tooltip"));
        miNewCategory.setName("miNewCategory");
        miNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewCategoryActionPerformed(evt);
            }
        });
        mApp.add(miNewCategory);

        jSeparator2.setName("jSeparator2");
        mApp.add(jSeparator2);

        miSettings.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miSettings.setIcon(Icons.SETTINGS_MENU);
        miSettings.setText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.settings.text"));
        miSettings.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.appMenu.settings.tooltip"));
        miSettings.setName("miSettings");
        miSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSettingsActionPerformed(evt);
            }
        });
        mApp.add(miSettings);

        jSeparator3.setName("jSeparator3");
        mApp.add(jSeparator3);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(Main.class).getContext().getActionMap(MainFrame.class, this);
        miExit.setAction(actionMap.get("quit"));
        miExit.setIcon(Icons.LOGOUT);
        miExit.setText(RESOURCE_BUNDLE.getString("MainFrame.miExit.text"));
        miExit.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.exitMenuItem.tooltip"));
        miExit.setName("miExit");
        mApp.add(miExit);

        menuBar.add(mApp);

        mDatabase.setText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.text"));
        mDatabase.setMargin(new java.awt.Insets(0, 4, 0, 4));
        mDatabase.setName("mDatabase");

        miOpenDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpenDatabase.setText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miOpen.text"));
        miOpenDatabase.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miOpen.tooltip"));
        miOpenDatabase.setName("miOpenDatabase");
        miOpenDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenDatabaseActionPerformed(evt);
            }
        });
        mDatabase.add(miOpenDatabase);

        miCreateDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        miCreateDatabase.setText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miNew.text"));
        miCreateDatabase.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miNew.tooltip"));
        miCreateDatabase.setName("miCreateDatabase");
        miCreateDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCreateDatabaseActionPerformed(evt);
            }
        });
        mDatabase.add(miCreateDatabase);

        miDeleteDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miDeleteDatabase.setText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miDelete.text"));
        miDeleteDatabase.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miDelete.tooltip"));
        miDeleteDatabase.setName("miDeleteDatabase");
        miDeleteDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDeleteDatabaseActionPerformed(evt);
            }
        });
        mDatabase.add(miDeleteDatabase);

        jSeparator1.setName("jSeparator1");
        mDatabase.add(jSeparator1);

        miRenameDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        miRenameDatabase.setText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miRenameDatabase.text"));
        miRenameDatabase.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miRenameDatabase.tooltip"));
        miRenameDatabase.setName("miRenameDatabase");
        miRenameDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRenameDatabaseActionPerformed(evt);
            }
        });
        mDatabase.add(miRenameDatabase);

        miDatabaseInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        miDatabaseInfo.setIcon(Icons.DATABASE_INFO_MENU);
        miDatabaseInfo.setText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miInfo.text"));
        miDatabaseInfo.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mDatabase.miInfo.tooltip"));
        miDatabaseInfo.setName("miDatabaseInfo");
        miDatabaseInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDatabaseInfoActionPerformed(evt);
            }
        });
        mDatabase.add(miDatabaseInfo);

        menuBar.add(mDatabase);

        jMenu1.setText(RESOURCE_BUNDLE.getString("MainFrame.mHelp.text"));
        jMenu1.setMargin(new java.awt.Insets(0, 4, 0, 4));
        jMenu1.setName("jMenu1");

        miSupport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        miSupport.setIcon(Icons.SUPPORT_MENU);
        miSupport.setText(RESOURCE_BUNDLE.getString("MainFrame.mHelp.support.text"));
        miSupport.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mHelp.support.tooltip"));
        miSupport.setName("miSupport");
        miSupport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSupportActionPerformed(evt);
            }
        });
        jMenu1.add(miSupport);

        jSeparator4.setName("jSeparator4");
        jMenu1.add(jSeparator4);

        miAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miAbout.setText(RESOURCE_BUNDLE.getString("MainFrame.mHelp.about.text"));
        miAbout.setToolTipText(RESOURCE_BUNDLE.getString("MainFrame.mHelp.about.tooltip"));
        miAbout.setName("miAbout");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        jMenu1.add(miAbout);

        menuBar.add(jMenu1);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metoda pro vytvoření nového receptu.
     * @param evt 
     */
    private void miNewRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewRecipeActionPerformed
        CookBook.Recipe recipe = new CookBook.Recipe();
        recipeDialog = new RecipeDialog(this.getFrame(), true, 
                RESOURCE_BUNDLE.getString("MainFrame.newRecipe.text"), recipe);
        recipeDialog.setVisible(true);
        if(recipeDialog.getReturnStatus()==RecipeDialog.RET_OK) {
            MyTree.addNewRecipe(recipe);
        }
    }//GEN-LAST:event_miNewRecipeActionPerformed

    /**
     * Metoda pro vytvoření nové kategorie.
     * @param evt 
     */
    private void miNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewCategoryActionPerformed
        categoryDialog = new CategoryDialog(this.getFrame(), true, RESOURCE_BUNDLE.getString("MainFrame.newCategory.text"), null);
        categoryDialog.setVisible(true);
        if(categoryDialog.getReturnStatus()==CategoryDialog.RET_OK) {
            MyTree.addNewCategory(categoryDialog.getNode());
        }
    }//GEN-LAST:event_miNewCategoryActionPerformed

    /**
     * Metoda pro zobrazení nastavení aplikace.
     * @param evt 
     */
    private void miSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSettingsActionPerformed
        settingsDialog = new SettingsDialog(new javax.swing.JFrame(), true);
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_miSettingsActionPerformed

    /**
     * Metoda otevře již existující databázi receptů.
     * @param evt 
     */
    private void miOpenDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenDatabaseActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setFileFilter(getDatabaseFileFilter());
        fileChooser.setDialogTitle(RESOURCE_BUNDLE.getString("MainFrame.fileChooser.title.text"));
        fileChooser.setApproveButtonText(RESOURCE_BUNDLE.getString("Application.text.open"));
        
        int result = fileChooser.showOpenDialog(this.getFrame());
        
        /* pokud byla vybrána nějaká kategorie receptů */
        if(result==JFileChooser.APPROVE_OPTION) {
            /* kontrola správnosti databáze */
            if(databaseOperations.checkDatabase(fileChooser.getSelectedFile())) {
                String databasePath = fileChooser.getSelectedFile().getAbsolutePath();
                
                /* kontrola, zda-li se vybraná databáze nachází v uživatelské složce */
                if(databasePath.startsWith(FileOperations.getCurrentDir() + 
                        File.separator + FileOperations.getUserDir())) {
                    settings.setDatabaseInUserDir(true);
                } else settings.setDatabaseInUserDir(false);

                String databaseName = databasePath.substring(
                        databasePath.lastIndexOf(File.separator)+1, databasePath.lastIndexOf('.'));
                
                /* pokud je databáze v uživatelské složce, nastaví se tak i databázový soubor
                  - bude obsahovat relativní cestu */
                if(settings.isDatabaseInUserDir()) FileOperations.setUserDatabaseFile(databaseName, true);
                else FileOperations.setUserDatabaseFile(databasePath, false);
                
                settings.setDatabaseName(databaseName);
                settings.setDatabasePath(FileOperations.getUserDatabaseFile().toString());
                
                        OpenDatabaseThread openDatabaseThread = new OpenDatabaseThread();
                        openDatabaseThread.execute();
                        
                        
//                        statusPanel.setStatusMessage("Otevírání databáze...", new Date(), Icons.STATUS_DATABASE);
//                        statusPanel.setAnimationIcon(Icons.TASK_BUSY);
//
//                        /* pokus o načtení dat z databáze */
//                        if(!databaseOperations.readDataFromDatabase(FileOperations.getUserDatabaseFile())) {
//                            JOptionPane.showMessageDialog(null,
//                                    bundle.getString("Main.userDataFolder.readDatabaseErrorFirst.text") +
//                                            "\n\n'" + FileOperations.getUserDatabaseFile().getPath() + "'\n\n" +
//                                            bundle.getString("Main.userDataFolder.readDatabaseErrorSecond.text"),
//                                    bundle.getString("Main.userDataFolder.readFileError.title")
//                                    + FileOperations.getUserDatabaseFile().getPath() + "'",
//                                    JOptionPane.ERROR_MESSAGE);
//                        } else {
//                            /* proběhne-li načtení dat bez chyb, inicializuje se nový strom receptů,
//                             naplní se daty a vytvoří se setříděné kategorie */
//                            MyTree.getInstance().initMyTree(false);
//                            fillTree();
//                            MyTree.createSortedCategories();
//                            MyTree.setFilterToModel(SearchPanel.getFilter(), false);
//                            fileOperations.setWritable(FileOperations.getUserDatabaseFile(), true);
//
//                            statusPanel.setStatusMessage("Otevřena databáze '" + settings.getDatabaseName() 
//                                    + "'", new Date(), Icons.STATUS_DATABASE_OPEN);
//                            statusPanel.setAnimationIcon(Icons.TASK_IDLE);
//                        }
                
            } else {
                JOptionPane.showMessageDialog(this.getFrame(),
                        RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorFirst.text") +
                                "\n\n'" + fileChooser.getSelectedFile().getPath() + "'\n\n" +
                                RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorSecond.text"),
                        RESOURCE_BUNDLE.getString("Main.userDataFolder.readFileError.title")
                        + fileChooser.getSelectedFile().getPath() + "'",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_miOpenDatabaseActionPerformed

    /**
     * Metoda vrátí FileFiltr pro .sqlite soubory.
     * @return FileFiltr.
     */
    private FileFilter getDatabaseFileFilter() {
        
        return new FileFilter() {

            @Override
            public boolean accept(File file) {
                if(file.getName().toLowerCase().endsWith(FileOperations.getDatabaseExtension())) return true;
                
                if(file.isDirectory()) return true;
                
                return false;
            }

            @Override
            public String getDescription() {
                return "*.sqlite " + RESOURCE_BUNDLE.getString("Application.text.files");
            }
        };          
    }
    
    /**
     * Metoda zobrazí dialogové okno pro zadání nového názvu databáze.
     * @param evt 
     */
    private void miCreateDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCreateDatabaseActionPerformed
        NewDatabaseDialog newDatabaseDialog = new NewDatabaseDialog(this.getFrame(), true);
        newDatabaseDialog.setVisible(true);
        
        /* pokud byl zadán název databáze */
        if(newDatabaseDialog.getReturnStatus()==NewDatabaseDialog.RET_OK) {
            File newDatabaseFile = new File(FileOperations.getUserDir() + File.separator + 
                NewDatabaseDialog.newDatabaseName + FileOperations.getDatabaseExtension());
            if(!fileOperations.checkFilePath(newDatabaseFile)) {
                FileOperations.setUserDatabaseFile(NewDatabaseDialog.newDatabaseName, true);
                settings.setDatabaseName(NewDatabaseDialog.newDatabaseName);
                settings.setDatabasePath(FileOperations.getUserDatabaseFile().toString());

                /* pokus o vytvoření databázového souboru */
                if(!fileOperations.createFile(FileOperations.getUserDatabaseFile())) {
                    JOptionPane.showConfirmDialog(this.getFrame(),
                            RESOURCE_BUNDLE.getString("Main.userDataFolder.createDatabaseFileError.text"),
                            RESOURCE_BUNDLE.getString("Main.userDataFolder.createFileError.title")
                            + FileOperations.getUserSettingsFile().getPath() + "'",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    /* byl-li databázový soubor vytvořen, vytvoří se v něm nová databáze */
                    databaseOperations.createNewDatabase(FileOperations.getUserDatabaseFile());
                    fileOperations.setWritable(FileOperations.getUserDatabaseFile(), true);

                    TreeNodes treeNodes = TreeNodes.getInstance();
                    CookBook cookBook = CookBook.getInstance();

                    if(treeNodes.getNodes()!=null) treeNodes.getNodes().clear();
                    if(cookBook.getRecipes()!=null) cookBook.removeAllRecipes();

                    MyTree.getInstance().initMyTree(false);
                    MyTree.createSortedCategories();
                    SearchPanel.setFilter("");
                    
                    statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.createdDatabase.text") + " '" + settings.getDatabaseName()
                            + "'", new Date(), Icons.STATUS_DATABASE_NEW);
                }
            } else {
                JOptionPane.showMessageDialog(this.getFrame(),
                        RESOURCE_BUNDLE.getString("Main.userDataFolder.createDatabaseFileSameFileError.text"),
                        RESOURCE_BUNDLE.getString("Main.userDataFolder.createFileError.title")
                        + newDatabaseFile.getPath() + "'",
                        JOptionPane.ERROR_MESSAGE);
            }
        } 
    }//GEN-LAST:event_miCreateDatabaseActionPerformed

    /**
     * Metoda smaže aktuální databázi.
     * @param evt 
     */
    private void miDeleteDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDeleteDatabaseActionPerformed
        int result = JOptionPane.showConfirmDialog(this.getFrame(), 
                RESOURCE_BUNDLE.getString("MainFrame.databaseDelete.confirmation.text"),
                RESOURCE_BUNDLE.getString("MainFrame.databaseDelete.confirmation.title"), JOptionPane.YES_NO_OPTION);
        
        if(result==JOptionPane.OK_OPTION) {
            if(fileOperations.deteleFile(FileOperations.getUserDatabaseFile())) {
                
                statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.deletedDatabase.text") + " '" + settings.getDatabaseName()
                        + "'", new Date(), Icons.STATUS_DATABASE_DELETE);
                
                TreeNodes treeNodes = TreeNodes.getInstance();
                CookBook cookBook = CookBook.getInstance();

                if(treeNodes.getNodes()!=null) treeNodes.getNodes().clear();
                if(cookBook.getRecipes()!=null) cookBook.removeAllRecipes();

                settings.setDatabaseName("<" + RESOURCE_BUNDLE.getString("Application.text.emptyDatabase") + ">");
                settings.setDatabasePath("");
                
                MyTree.getInstance().initMyTree(false);
                
                OpenOrCreateDatabaseDialog openOrCreateDatabaseDialog = 
                        new OpenOrCreateDatabaseDialog(this.getFrame(), true);
                openOrCreateDatabaseDialog.setVisible(true);
                
                /* klikne-li uživatel na "zrušit" - aplikace se ukončí */
                if(openOrCreateDatabaseDialog.getReturnStatus()==OpenOrCreateDatabaseDialog.RET_CANCEL)
                    System.exit(0);
                else {
                    /* pokud je vybráno vytvoření nové databáze */
                    if(OpenOrCreateDatabaseDialog.rbtnNewDatabase.isSelected()) {
                        String databaseName = OpenOrCreateDatabaseDialog.txtfNewDatabase.getText();
                        
                        File newDatabaseFile = new File(FileOperations.getUserDir() + File.separator + 
                            databaseName + FileOperations.getDatabaseExtension());
                        if(!fileOperations.checkFilePath(newDatabaseFile)) {
                            FileOperations.setUserDatabaseFile(databaseName, true);

                            if(!databaseName.equals("")) settings.setDatabaseName(databaseName);
                            else settings.setDatabaseName("jHungryHamster");

                            settings.setDatabasePath(FileOperations.getUserDatabaseFile().getAbsolutePath());
                            
                            MyTree.getInstance().initMyTree(false);
                
                            if(!fileOperations.createFile(FileOperations.getUserDatabaseFile())) {
                                JOptionPane.showConfirmDialog(this.getFrame(),
                                        RESOURCE_BUNDLE.getString("Main.userDataFolder.createDatabaseFileError.text"),
                                        RESOURCE_BUNDLE.getString("Main.userDataFolder.createFileError.title")
                                        + FileOperations.getUserSettingsFile().getPath() + "'",
                                        JOptionPane.ERROR_MESSAGE);
                                System.exit(0);
                            } else {
                                databaseOperations.createNewDatabase(FileOperations.getUserDatabaseFile());
                                fileOperations.setWritable(FileOperations.getUserDatabaseFile(), true);
                                
                                MyTree.createSortedCategories();
                                SearchPanel.setFilter("");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this.getFrame(),
                                    RESOURCE_BUNDLE.getString("Main.userDataFolder.createDatabaseFileSameFileError.text"),
                                    RESOURCE_BUNDLE.getString("Main.userDataFolder.createFileError.title")
                                    + newDatabaseFile.getPath() + "'",
                                    JOptionPane.ERROR_MESSAGE);
                            System.exit(0);
                        }
                        
                        statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.createdDatabase.text") + " '"
                                + settings.getDatabaseName()
                                + "'", new Date(), Icons.STATUS_DATABASE_NEW);
                    } else {
                        /* pokud je vybráno otevření již existující databáze */
                        String databasePath = OpenOrCreateDatabaseDialog.txtfOpenDatabase.getText();
                        
                        /* kontrola správnosti databáze */
                        if(databaseOperations.checkDatabase(new File(databasePath))) {
                            
                            /* kontrola, zda-li se vybraná databáze nachází v uživatelské složce */
                            if(databasePath.startsWith(FileOperations.getCurrentDir() + 
                                    File.separator + FileOperations.getUserDir())) {
                                settings.setDatabaseInUserDir(true);
                            } else settings.setDatabaseInUserDir(false);
                            
                            String databaseName = databasePath.substring(
                                    databasePath.lastIndexOf(File.separator)+1, databasePath.lastIndexOf('.'));

                            /* pokud je databáze v uživatelské složce, nastaví se tak i databázový soubor
                              - bude obsahovat relativní cestu */
                            if(settings.isDatabaseInUserDir()) FileOperations.setUserDatabaseFile(databaseName, true);
                            else FileOperations.setUserDatabaseFile(databasePath, false);

                            settings.setDatabaseName(databaseName);
                            settings.setDatabasePath(FileOperations.getUserDatabaseFile().toString());

                            /* pokus o načtení dat z databáze */
                            if(!databaseOperations.readDataFromDatabase(FileOperations.getUserDatabaseFile())) {
                                JOptionPane.showMessageDialog(this.getFrame(),
                                        RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorFirst.text") +
                                            "\n\n'" + FileOperations.getUserDatabaseFile().getPath() + "'\n\n" +
                                                RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorSecond.text"),
                                        RESOURCE_BUNDLE.getString("Main.userDataFolder.readFileError.title")
                                        + FileOperations.getUserDatabaseFile().getPath() + "'",
                                        JOptionPane.ERROR_MESSAGE);
                                System.exit(0);
                            } else fileOperations.setWritable(FileOperations.getUserDatabaseFile(), true);
                            
                            MyTree.getInstance().initMyTree(false);
                            fillTree();
                            MyTree.createSortedCategories();
                            SearchPanel.setFilter("");
                            
                            statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.openedDatabase.text") + " '"
                                    + settings.getDatabaseName()
                                    + "'", new Date(), Icons.STATUS_DATABASE_OPEN);
                        } else {
                            JOptionPane.showMessageDialog(this.getFrame(),
                                    RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorFirst.text") +
                                            "\n\n'" + databasePath + "'\n\n" +
                                            RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorSecond.text"),
                                    RESOURCE_BUNDLE.getString("Main.userDataFolder.readFileError.title")
                                    + databasePath + "'",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }                            
        }
    }//GEN-LAST:event_miDeleteDatabaseActionPerformed

    /**
     * Metoda zobrazí dialogové okno s informacemi ohledně databáze.
     * @param evt 
     */
    private void miDatabaseInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDatabaseInfoActionPerformed
        DatabaseInformationDialog databaseInformationDialog = 
                new DatabaseInformationDialog(this.getFrame(), true);
        databaseInformationDialog.setVisible(true);
    }//GEN-LAST:event_miDatabaseInfoActionPerformed

    /**
     * Metoda zobrazí dialog O programu
     * @param evt 
     */
    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        AboutApplicationDialog aboutApplicationDialog = 
                new AboutApplicationDialog(this.getFrame(), true);
        aboutApplicationDialog.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    /**
     * Metoda zobrazí dialog Podpora projektu
     * @param evt 
     */
    private void miSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSupportActionPerformed
        SupportProjectDialog supportProjectDialog = 
                new SupportProjectDialog(this.getFrame(), true);
        supportProjectDialog.setVisible(true);
    }//GEN-LAST:event_miSupportActionPerformed

    private void miRenameDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRenameDatabaseActionPerformed
        RenameDatabaseDialog renameDatabaseDialog = new RenameDatabaseDialog(this.getFrame(), true);
        renameDatabaseDialog.setVisible(true);
        
        if(renameDatabaseDialog.getReturnStatus()==RenameDatabaseDialog.RET_OK) {
            /* pokus o přejmenování databázového osuboru */
            File newDatabaseFile = fileOperations.renameFile(FileOperations.getUserDatabaseFile(), 
                    renameDatabaseDialog.getDatabaseName(), FileOperations.getDatabaseExtension());
            
            /* pokud byl databázový soubor přejmenován */
            if(newDatabaseFile!=null) {
                settings.setDatabaseName(renameDatabaseDialog.getDatabaseName());
                settings.setDatabasePath(newDatabaseFile.getAbsolutePath());
                FileOperations.setUserDatabaseFile(settings.getDatabasePath(), false);
                
                MyTree.renameRootNode(settings.getDatabaseName());
                MyTree.createSortedCategories();
                statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.databaseRenamedTo.text") + " '"
                                + settings.getDatabaseName() + "'",
                        new Date(), Icons.EDIT_DATABASE);
            } else {
                JOptionPane.showMessageDialog(this.getFrame(), 
                        RESOURCE_BUNDLE.getString("MainFrame.error.databaseRename.text"),
                        RESOURCE_BUNDLE.getString("Application.text.error"), JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_miRenameDatabaseActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JMenu mDatabase;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miCreateDatabase;
    private javax.swing.JMenuItem miDatabaseInfo;
    private javax.swing.JMenuItem miDeleteDatabase;
    private javax.swing.JMenuItem miNewCategory;
    private javax.swing.JMenuItem miNewRecipe;
    private javax.swing.JMenuItem miOpenDatabase;
    private javax.swing.JMenuItem miRenameDatabase;
    private javax.swing.JMenuItem miSettings;
    private javax.swing.JMenuItem miSupport;
    private RecipePanel recipePanel;
    private SearchPanel searchPanel1;
    private StatusPanel statusPanel1;
    // End of variables declaration//GEN-END:variables

    private void fillTree() {
        TreeNodes treeNodes = TreeNodes.getInstance();
        CookBook cookBook = CookBook.getInstance();
        
        ArrayList<TreeNodes.Node> tempNodes = new ArrayList<TreeNodes.Node>(treeNodes.getNodes());
        
        LOGGER.info("MainFrame - start of recipe tree initialization.");
        while(!tempNodes.isEmpty()) {
            for(Iterator<TreeNodes.Node> iterator = tempNodes.iterator(); iterator.hasNext(); ) {
                TreeNodes.Node node = iterator.next();
                
                if(node.getIdParent()==0) {
                    MyTree.addObjectFromDatabase(node);
                    LOGGER.debug("new category has been added: " + node);
                    iterator.remove();
                    tempNodes.remove(node);
                } else {
                    if(MyTree.getCategoryMap().get(node.getIdParent())!=null) {
                        MyTree.addObjectFromDatabase(node);
                        LOGGER.debug("new category has been added: " + node);
                        iterator.remove();
                        tempNodes.remove(node);
                    }
                }
            }
        }
        
        if(!cookBook.getRecipes().isEmpty()) {
            for(CookBook.Recipe recipe : cookBook.getRecipes()) {
                MyTree.addObjectFromDatabase(recipe);
                LOGGER.debug("new recipe has been added: " + recipe);
            }
        }
        
        MyTree.setFilterToModel("", false);
        
        LOGGER.info("MainFrame - end of recipe tree initialization.");
        
        MyTree.createSortedCategories();
    }
    
    /**
     * Metoda vrací status panel pro předání stavové zprávy.
     * Jo, je to prasárna, ale už nemám náladu to přepisovat.
     * @return StatusPanel
     */
    public static StatusPanel getStatusPanel() {
        return statusPanel;
    }
    
    /**
     * vypozoroval jsem, že první přístup do db pro získání obrázku je nějaký pomalý,
     * tak to volám hned po spuštění aplikace, kdy to uživatel ještě nepozná.
     */
    private void initFirstDatabaseQuerry() {
        CookBook cookBook = CookBook.getInstance();
        if(!cookBook.getRecipes().isEmpty())
            databaseOperations.insertImageToRecipeById(FileOperations.getUserDatabaseFile(),
                    cookBook.getRecipes().get(0));
    }
    
    class OpenDatabaseThread extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {
            statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.openingDatabase.text") + " '"
                    + settings.getDatabaseName()
                            + "'...", new Date(), Icons.STATUS_DATABASE);
            statusPanel.setAnimationIcon(Icons.TASK_BUSY);

            /* pokus o načtení dat z databáze */
            if(!databaseOperations.readDataFromDatabase(FileOperations.getUserDatabaseFile())) {
                JOptionPane.showMessageDialog(null,
                        RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorFirst.text") +
                                "\n\n'" + FileOperations.getUserDatabaseFile().getPath() + "'\n\n" +
                                RESOURCE_BUNDLE.getString("Main.userDataFolder.readDatabaseErrorSecond.text"),
                        RESOURCE_BUNDLE.getString("Main.userDataFolder.readFileError.title")
                        + FileOperations.getUserDatabaseFile().getPath() + "'",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                /* proběhne-li načtení dat bez chyb, inicializuje se nový strom receptů,
                 naplní se daty a vytvoří se setříděné kategorie */
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        MyTree.getInstance().initMyTree(false);
                        fillTree();
                        MyTree.createSortedCategories();
                        if(!SearchPanel.getFilter().trim().isEmpty()) MyTree.setFilterToModel(SearchPanel.getFilter(), false);
                        fileOperations.setWritable(FileOperations.getUserDatabaseFile(), true);

                        statusPanel.setStatusMessage(RESOURCE_BUNDLE.getString("MainFrame.status.openedDatabase.text") + " '"
                                + settings.getDatabaseName()
                                + "'", new Date(), Icons.STATUS_DATABASE_OPEN);
                        statusPanel.setAnimationIcon(Icons.TASK_IDLE);
                    }
                });
            }
            
            return null;
        }
    }
}
